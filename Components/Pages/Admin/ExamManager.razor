@page "/admin/exams"
@using Microsoft.EntityFrameworkCore
@using CSharpQuizBlazor.Models
@using CSharpQuizBlazor.Data
@inject IDbContextFactory<QuizDbContext> DbContextFactory
@inject NavigationManager Navigation

<h3>Exam Manager</h3>

<button class="btn btn-primary mb-3" @onclick="CreateExam">Create New Exam</button>

@if (exams == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (exams.Count == 0)
{
    <div class="alert alert-info">
        <h5>No exams found</h5>
        <p>Get started by creating your first exam. Click the "Create New Exam" button above.</p>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Exam Title</th>
                    <th>Questions Count</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var exam in exams)
                {
                    <tr>
                        <td>
                            <strong>@exam.Title</strong>
                        </td>
                        <td>
                            <span class="badge bg-info">@GetQuestionCount(exam.ExamId) questions</span>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-outline-primary btn-sm"
                                        @onclick="() => EditExam(exam.ExamId)"
                                        title="Edit Exam">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-outline-success btn-sm"
                                        @onclick="() => PreviewExam(exam.ExamId)"
                                        title="Preview Exam">
                                    <i class="bi bi-eye"></i> Preview
                                </button>
                                <button class="btn btn-outline-danger btn-sm"
                                        @onclick="() => DeleteExam(exam.ExamId)"
                                        title="Delete Exam">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (showDeleteConfirmation)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the exam "<strong>@examToDelete?.Title</strong>"?</p>
                    <p class="text-muted">This action cannot be undone and will remove all associated question mappings.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Exam> exams = new List<Exam>();
    private Dictionary<int, int> questionCounts = new Dictionary<int, int>();
    private bool showDeleteConfirmation = false;
    private Exam? examToDelete = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadExams();
    }

    private async Task LoadExams()
    {
        try
        {
            using var context = DbContextFactory.CreateDbContext();
            exams = await context.Exams.ToListAsync();

            // Load question counts for each exam
            questionCounts.Clear();
            foreach (var exam in exams)
            {
                var count = await context.ExamQuestions
                    .Where(eq => eq.ExamId == exam.ExamId)
                    .CountAsync();
                questionCounts[exam.ExamId] = count;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading exams: {ex.Message}");
        }
    }

    private int GetQuestionCount(int examId)
    {
        return questionCounts.ContainsKey(examId) ? questionCounts[examId] : 0;
    }

    private void CreateExam()
    {
        Navigation.NavigateTo("/admin/editexam");
    }

    private void EditExam(int examId)
    {
        Navigation.NavigateTo($"/admin/editexam/{examId}");
    }

    private void PreviewExam(int examId)
    {
        Navigation.NavigateTo($"/quiz/{examId}");
    }

    private void DeleteExam(int examId)
    {
        examToDelete = exams.FirstOrDefault(e => e.ExamId == examId);
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        examToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (examToDelete != null)
        {
            try
            {
                using var context = DbContextFactory.CreateDbContext();

                // Remove associated exam questions first
                var examQuestions = context.ExamQuestions
                    .Where(eq => eq.ExamId == examToDelete.ExamId);
                context.ExamQuestions.RemoveRange(examQuestions);

                // Remove the exam
                context.Exams.Remove(examToDelete);
                await context.SaveChangesAsync();

                // Reload the exams list
                await LoadExams();

                showDeleteConfirmation = false;
                examToDelete = null;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting exam: {ex.Message}");
            }
        }
    }
}
